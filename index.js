// Generated by CoffeeScript 1.9.3
var GemnasiumClient, https, moment;

https = require('https');

moment = require('moment');

GemnasiumClient = (function() {
  function GemnasiumClient() {
    this._token = process.env.GEMNASIUM_TOKEN;
    if (!this._token) {
      throw new Error('No GEMNASIUM_TOKEN environment variable set');
    }
    this._slug = process.env.GEMNASIUM_PROJECT_SLUG;
    if (!this._slug) {
      throw new Error('No GEMNASIUM_PROJECT_SLUG environment variable set');
    }
  }

  GemnasiumClient.prototype.alerts = function(cb) {
    return this._request('alerts', cb);
  };

  GemnasiumClient.prototype.dependencies = function(cb) {
    return this._request('dependencies', cb);
  };

  GemnasiumClient.prototype._request = function(action, cb) {
    return https.get(this._options(action), (function(_this) {
      return function(res) {
        var body;
        body = '';
        res.setEncoding('utf8');
        res.on('data', function(chunk) {
          return body += chunk;
        });
        return res.on('end', function() {
          if (res.statusCode !== 200) {
            return cb(new Error(body));
          }
          return _this._handleResponse(body, cb);
        });
      };
    })(this)).on('error', function(e) {
      return cb(e);
    });
  };

  GemnasiumClient.prototype._options = function(action) {
    return {
      hostname: 'api.gemnasium.com',
      path: "/v1/projects/" + this._slug + "/" + action,
      auth: "x:" + this._token
    };
  };

  GemnasiumClient.prototype._handleResponse = function(body, cb) {
    var e, parsed;
    parsed = null;
    try {
      parsed = JSON.parse(body);
    } catch (_error) {
      e = _error;
      console.log("body: ", body);
      return cb(e);
    }
    if (!parsed) {
      parsed = [];
    }
    parsed.map(function(item) {
      return item.open_at = moment(item.open_at);
    });
    return cb(void 0, parsed);
  };

  return GemnasiumClient;

})();

module.exports = GemnasiumClient;
